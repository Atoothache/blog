(window.webpackJsonp=window.webpackJsonp||[]).push([[67],{339:function(e,n,r){"use strict";r.r(n);var o=r(13),l=Object(o.a)({},(function(){var e=this,n=e._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"springboot2-0整合logback日志-详细"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#springboot2-0整合logback日志-详细"}},[e._v("#")]),e._v(" "),n("a",{attrs:{href:"https://www.cnblogs.com/zhangjianbing/p/8992897.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("springboot2.0整合logback日志(详细)"),n("OutboundLink")],1)]),e._v(" "),n("p",[e._v("一。")]),e._v(" "),n("p",[e._v("近期自己的项目想要一个记录日志的功能，而springboot本身就内置了日志功能，然而想要输入想要的日志，并且输出到磁盘，然后按天归档，或者日志的切分什么的，自带的日志仅仅具有简单的功能，百度了一番，总结如下，适合大多数的应用场景")]),e._v(" "),n("p",[e._v("二。")]),e._v(" "),n("p",[e._v("springboot的pom文件都会引一个parent")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>2.0.0.RELEASE</version>\n    </parent>\n")])])]),n("p",[e._v("点进去这个parent，会有一个这个dependency")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-dependencies</artifactId>\n        <version>2.0.0.RELEASE</version>\n        <relativePath>../../spring-boot-dependencies</relativePath>\n    </parent>\n")])])]),n("p",[e._v("再点进去就是2.0版本，所谓的它给你集成的各种包依赖，而且规定了版本号，其中有一个包如下")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("            <dependency>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-starter</artifactId>\n                <version>2.0.0.RELEASE</version>\n            </dependency>\n")])])]),n("p",[e._v("再点进去")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("    <dependency>\n      <groupId>org.springframework.boot</groupId>\n      <artifactId>spring-boot-starter-logging</artifactId>\n      <version>2.0.0.RELEASE</version>\n      <scope>compile</scope>\n    </dependency>\n")])])]),n("p",[e._v("再点，这些都是原有的日志包，所以，不必再引依赖了，直接用就ok了，用法如下：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("  <dependencies>\n    <dependency>\n      <groupId>ch.qos.logback</groupId>\n      <artifactId>logback-classic</artifactId>\n      <version>1.2.3</version>\n      <scope>compile</scope>\n    </dependency>\n    <dependency>\n      <groupId>org.apache.logging.log4j</groupId>\n      <artifactId>log4j-to-slf4j</artifactId>\n      <version>2.10.0</version>\n      <scope>compile</scope>\n    </dependency>\n    <dependency>\n      <groupId>org.slf4j</groupId>\n      <artifactId>jul-to-slf4j</artifactId>\n      <version>1.7.25</version>\n      <scope>compile</scope>\n    </dependency>\n")])])]),n("p",[e._v("============================分割线====================================")]),e._v(" "),n("p",[e._v("首先，官方推荐使用的xml名字的格式为：logback-spring.xml而不是logback.xml，至于为什么，因为带spring后缀的可以使用"),n("springProfile",[e._v("这个标签。")])],1),e._v(" "),n("p",[e._v("在resource下创建logback-spring.xml文件")]),e._v(" "),n("p",[e._v("内容如下，每行都有注释了")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('<?xml version="1.0" encoding="UTF-8"?>\n\x3c!-- 日志级别从低到高分为TRACE < DEBUG < INFO < WARN < ERROR < FATAL，如果设置为WARN，则低于WARN的信息都不会输出 --\x3e\n\x3c!-- scan:当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true --\x3e\n\x3c!-- scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。 --\x3e\n\x3c!-- debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 --\x3e\n<configuration  scan="true" scanPeriod="10 seconds">\n\n    \x3c!--<include resource="org/springframework/boot/logging/logback/base.xml" />--\x3e\n\n    <contextName>logback</contextName>\n    \x3c!-- name的值是变量的名称，value的值时变量定义的值。通过定义的值会被插入到logger上下文中。定义变量后，可以使“${}”来使用变量。 --\x3e\n    <property name="log.path" value="D:/nmyslog/nmys" />\n\n    \x3c!-- 彩色日志 --\x3e\n    \x3c!-- 彩色日志依赖的渲染类 --\x3e\n    <conversionRule conversionWord="clr" converterClass="org.springframework.boot.logging.logback.ColorConverter" />\n    <conversionRule conversionWord="wex" converterClass="org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter" />\n    <conversionRule conversionWord="wEx" converterClass="org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter" />\n    \x3c!-- 彩色日志格式 --\x3e\n    <property name="CONSOLE_LOG_PATTERN" value="${CONSOLE_LOG_PATTERN:-%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}}"/>\n\n\n    \x3c!--输出到控制台--\x3e\n    <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">\n        \x3c!--此日志appender是为开发使用，只配置最底级别，控制台输出的日志级别是大于或等于此级别的日志信息--\x3e\n        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">\n            <level>info</level>\n        </filter>\n        <encoder>\n            <Pattern>${CONSOLE_LOG_PATTERN}</Pattern>\n            \x3c!-- 设置字符集 --\x3e\n            <charset>UTF-8</charset>\n        </encoder>\n    </appender>\n\n\n    \x3c!--输出到文件--\x3e\n\n    \x3c!-- 时间滚动输出 level为 DEBUG 日志 --\x3e\n    <appender name="DEBUG_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">\n        \x3c!-- 正在记录的日志文件的路径及文件名 --\x3e\n        <file>${log.path}/log_debug.log</file>\n        \x3c!--日志文件输出格式--\x3e\n        <encoder>\n            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n</pattern>\n            <charset>UTF-8</charset> \x3c!-- 设置字符集 --\x3e\n        </encoder>\n        \x3c!-- 日志记录器的滚动策略，按日期，按大小记录 --\x3e\n        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">\n            \x3c!-- 日志归档 --\x3e\n            <fileNamePattern>${log.path}/debug/log-debug-%d{yyyy-MM-dd}.%i.log</fileNamePattern>\n            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">\n                <maxFileSize>100MB</maxFileSize>\n            </timeBasedFileNamingAndTriggeringPolicy>\n            \x3c!--日志文件保留天数--\x3e\n            <maxHistory>15</maxHistory>\n        </rollingPolicy>\n        \x3c!-- 此日志文件只记录debug级别的 --\x3e\n        <filter class="ch.qos.logback.classic.filter.LevelFilter">\n            <level>debug</level>\n            <onMatch>ACCEPT</onMatch>\n            <onMismatch>DENY</onMismatch>\n        </filter>\n    </appender>\n\n    \x3c!-- 时间滚动输出 level为 INFO 日志 --\x3e\n    <appender name="INFO_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">\n        \x3c!-- 正在记录的日志文件的路径及文件名 --\x3e\n        <file>${log.path}/log_info.log</file>\n        \x3c!--日志文件输出格式--\x3e\n        <encoder>\n            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n</pattern>\n            <charset>UTF-8</charset>\n        </encoder>\n        \x3c!-- 日志记录器的滚动策略，按日期，按大小记录 --\x3e\n        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">\n            \x3c!-- 每天日志归档路径以及格式 --\x3e\n            <fileNamePattern>${log.path}/info/log-info-%d{yyyy-MM-dd}.%i.log</fileNamePattern>\n            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">\n                <maxFileSize>100MB</maxFileSize>\n            </timeBasedFileNamingAndTriggeringPolicy>\n            \x3c!--日志文件保留天数--\x3e\n            <maxHistory>15</maxHistory>\n        </rollingPolicy>\n        \x3c!-- 此日志文件只记录info级别的 --\x3e\n        <filter class="ch.qos.logback.classic.filter.LevelFilter">\n            <level>info</level>\n            <onMatch>ACCEPT</onMatch>\n            <onMismatch>DENY</onMismatch>\n        </filter>\n    </appender>\n\n    \x3c!-- 时间滚动输出 level为 WARN 日志 --\x3e\n    <appender name="WARN_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">\n        \x3c!-- 正在记录的日志文件的路径及文件名 --\x3e\n        <file>${log.path}/log_warn.log</file>\n        \x3c!--日志文件输出格式--\x3e\n        <encoder>\n            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n</pattern>\n            <charset>UTF-8</charset> \x3c!-- 此处设置字符集 --\x3e\n        </encoder>\n        \x3c!-- 日志记录器的滚动策略，按日期，按大小记录 --\x3e\n        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">\n            <fileNamePattern>${log.path}/warn/log-warn-%d{yyyy-MM-dd}.%i.log</fileNamePattern>\n            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">\n                <maxFileSize>100MB</maxFileSize>\n            </timeBasedFileNamingAndTriggeringPolicy>\n            \x3c!--日志文件保留天数--\x3e\n            <maxHistory>15</maxHistory>\n        </rollingPolicy>\n        \x3c!-- 此日志文件只记录warn级别的 --\x3e\n        <filter class="ch.qos.logback.classic.filter.LevelFilter">\n            <level>warn</level>\n            <onMatch>ACCEPT</onMatch>\n            <onMismatch>DENY</onMismatch>\n        </filter>\n    </appender>\n\n\n    \x3c!-- 时间滚动输出 level为 ERROR 日志 --\x3e\n    <appender name="ERROR_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">\n        \x3c!-- 正在记录的日志文件的路径及文件名 --\x3e\n        <file>${log.path}/log_error.log</file>\n        \x3c!--日志文件输出格式--\x3e\n        <encoder>\n            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n</pattern>\n            <charset>UTF-8</charset> \x3c!-- 此处设置字符集 --\x3e\n        </encoder>\n        \x3c!-- 日志记录器的滚动策略，按日期，按大小记录 --\x3e\n        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">\n            <fileNamePattern>${log.path}/error/log-error-%d{yyyy-MM-dd}.%i.log</fileNamePattern>\n            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">\n                <maxFileSize>100MB</maxFileSize>\n            </timeBasedFileNamingAndTriggeringPolicy>\n            \x3c!--日志文件保留天数--\x3e\n            <maxHistory>15</maxHistory>\n        </rollingPolicy>\n        \x3c!-- 此日志文件只记录ERROR级别的 --\x3e\n        <filter class="ch.qos.logback.classic.filter.LevelFilter">\n            <level>ERROR</level>\n            <onMatch>ACCEPT</onMatch>\n            <onMismatch>DENY</onMismatch>\n        </filter>\n    </appender>\n\n    \x3c!--\n        <logger>用来设置某一个包或者具体的某一个类的日志打印级别、\n        以及指定<appender>。<logger>仅有一个name属性，\n        一个可选的level和一个可选的addtivity属性。\n        name:用来指定受此logger约束的某一个包或者具体的某一个类。\n        level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，\n              还有一个特俗值INHERITED或者同义词NULL，代表强制执行上级的级别。\n              如果未设置此属性，那么当前logger将会继承上级的级别。\n        addtivity:是否向上级logger传递打印信息。默认是true。\n    --\x3e\n    \x3c!--<logger name="org.springframework.web" level="info"/>--\x3e\n    \x3c!--<logger name="org.springframework.scheduling.annotation.ScheduledAnnotationBeanPostProcessor" level="INFO"/>--\x3e\n    \x3c!--\n        使用mybatis的时候，sql语句是debug下才会打印，而这里我们只配置了info，所以想要查看sql语句的话，有以下两种操作：\n        第一种把<root level="info">改成<root level="DEBUG">这样就会打印sql，不过这样日志那边会出现很多其他消息\n        第二种就是单独给dao下目录配置debug模式，代码如下，这样配置sql语句会打印，其他还是正常info级别：\n     --\x3e\n\n\n    \x3c!--\n        root节点是必选节点，用来指定最基础的日志输出级别，只有一个level属性\n        level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，\n        不能设置为INHERITED或者同义词NULL。默认是DEBUG\n        可以包含零个或多个元素，标识这个appender将会添加到这个logger。\n    --\x3e\n\n    \x3c!--开发环境:打印控制台--\x3e\n    <springProfile name="dev">\n        <logger name="com.nmys.view" level="debug"/>\n    </springProfile>\n\n    <root level="info">\n        <appender-ref ref="CONSOLE" />\n        <appender-ref ref="DEBUG_FILE" />\n        <appender-ref ref="INFO_FILE" />\n        <appender-ref ref="WARN_FILE" />\n        <appender-ref ref="ERROR_FILE" />\n    </root>\n\n    \x3c!--生产环境:输出到文件--\x3e\n    \x3c!--<springProfile name="pro">--\x3e\n        \x3c!--<root level="info">--\x3e\n            \x3c!--<appender-ref ref="CONSOLE" />--\x3e\n            \x3c!--<appender-ref ref="DEBUG_FILE" />--\x3e\n            \x3c!--<appender-ref ref="INFO_FILE" />--\x3e\n            \x3c!--<appender-ref ref="ERROR_FILE" />--\x3e\n            \x3c!--<appender-ref ref="WARN_FILE" />--\x3e\n        \x3c!--</root>--\x3e\n    \x3c!--</springProfile>--\x3e\n\n</configuration>\n')])])]),n("p",[e._v("其中说一下，彩色日志这个功能，需要下载插件，然后在yml或者properties中配置。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("logging.config=classpath:log/logback-spring.xml\nlogging.path=D:/nmyslog/nmys\n")])])]),n("p",[e._v("日志的使用方式，就跟普通使用一样，只不过，此配置配置的是不仅在控制台输出而且在磁盘上也会保留，并且info/debug/error/warn的日志都区分开了，并且按照每天做了归档，")])])}),[],!1,null,null,null);n.default=l.exports}}]);